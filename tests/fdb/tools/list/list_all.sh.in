#!/usr/bin/env bash

set -ux

yell() { printf "$(basename "$0"): \033[0;31m!!! %s !!!\033[0m\\n" "$*" >&2; }
die() { yell "$*"; exit 1; }
try() { "$@" || die "Errored HERE => '$*'"; }

line_count() {
  [[ $# -eq 1 ]] || die "line_count requires 1 argument; expected line count"
  val=$(wc -l < out) && val=$((val + 0))
  [[ $val -eq $1 ]] || die "Incorrect count => [$val != $1]"
}

grep_count() {
  [[ $# -eq 2 ]] || die "grep_count requires 2; regex and expected count"
  val=$(grep -cE "$1" out)
  [[ $val -eq $2 ]] || die "Incorrect count [$val != $2] for regex [$1]"
}

########################################################################################################################

export PATH=@CMAKE_BINARY_DIR@/bin:$PATH
export FDB5_CONFIG_FILE="local.yaml"
export FDB_HOME=@PROJECT_BINARY_DIR@

test_name=all
src_data="od.oper.grib"
src_dir=@CMAKE_CURRENT_SOURCE_DIR@
bin_dir=@CMAKE_CURRENT_BINARY_DIR@

########################################################################################################################

echo "running test '$test_name' on $(hostname)"

try cd $bin_dir

try rm -rf $test_name
try mkdir -p $test_name/localroot

try cd $test_name

try cp "$src_dir/local.yaml" ./
try cp "$bin_dir/$src_data" ./

########################################################################################################################

# Ensure that listing finds the correct data, but excludes duplicates.

# Set up the data for the test

try grib_set -s class=rd,expver=xxxx,type=fc,step=0 "$src_data" data.xxxx.0.grib
try grib_set -s class=rd,expver=xxxx,type=fc,step=1 "$src_data" data.xxxx.1.grib
try grib_set -s class=rd,expver=xxxx,type=fc,step=2 "$src_data" data.xxxx.2.grib
try grib_set -s class=rd,expver=xxxy,type=fc,step=0 "$src_data" data.xxxy.0.grib
try grib_set -s class=rd,expver=xxxy,type=fc,step=1 "$src_data" data.xxxy.1.grib
try grib_set -s class=rd,expver=xxxy,type=fc,step=2 "$src_data" data.xxxy.2.grib

# Set up some regexes for later testing

regex_x0="{class=rd,expver=xxxx,stream=oper,date=[0-9]+,time=(12|00)00,domain=g}{type=fc,levtype=pl}{step=0,levelist=[0-9]+,param=[0-9]+}"
regex_x1="{class=rd,expver=xxxx,stream=oper,date=[0-9]+,time=(12|00)00,domain=g}{type=fc,levtype=pl}{step=1,levelist=[0-9]+,param=[0-9]+}"
regex_x2="{class=rd,expver=xxxx,stream=oper,date=[0-9]+,time=(12|00)00,domain=g}{type=fc,levtype=pl}{step=2,levelist=[0-9]+,param=[0-9]+}"
regex_y0="{class=rd,expver=xxxy,stream=oper,date=[0-9]+,time=(12|00)00,domain=g}{type=fc,levtype=pl}{step=0,levelist=[0-9]+,param=[0-9]+}"
regex_y1="{class=rd,expver=xxxy,stream=oper,date=[0-9]+,time=(12|00)00,domain=g}{type=fc,levtype=pl}{step=1,levelist=[0-9]+,param=[0-9]+}"
regex_y2="{class=rd,expver=xxxy,stream=oper,date=[0-9]+,time=(12|00)00,domain=g}{type=fc,levtype=pl}{step=2,levelist=[0-9]+,param=[0-9]+}"

# We loop over all these tests twice. We should get the same listing results both times
# as the default behaviour is to only show the data that would be retrieved (i.e. that matches a MARS request.)

sum=0
for i in 1 2; do

  echo "============ Loop $i ============"

  try fdb-write data.xxxx.0.grib
  try fdb-list --all --minimum-keys="" --porcelain | tee out
  if [[ $i = 1 ]]; then
    sum=$((sum + 24))
    line_count $sum
    grep_count "$regex_x1" 0
    grep_count "$regex_x2" 0
    grep_count "$regex_y0" 0
    grep_count "$regex_y1" 0
    grep_count "$regex_y2" 0
  fi
  grep_count "$regex_x0" 24

  try fdb-write data.xxxy.0.grib
  try fdb-list --all --minimum-keys="" --porcelain | tee out
  if [[ $i = 1 ]]; then
    sum=$((sum + 24))
    line_count $sum
    grep_count "$regex_x1" 0
    grep_count "$regex_x2" 0
    grep_count "$regex_y1" 0
    grep_count "$regex_y2" 0
  fi
  grep_count "$regex_x0" 24
  grep_count "$regex_y0" 24


  try fdb-write data.xxxx.1.grib
  try fdb-list --all --minimum-keys="" --porcelain | tee out
  if [[ $i = 1 ]]; then
    sum=$((sum + 24))
    line_count $sum
    grep_count "$regex_x2" 0
    grep_count "$regex_y1" 0
    grep_count "$regex_y2" 0
  fi
  grep_count "$regex_x0" 24
  grep_count "$regex_y0" 24
  grep_count "$regex_x1" 24

  try fdb-write data.xxxy.1.grib
  try fdb-list --all --minimum-keys="" --porcelain | tee out
  if [[ $i = 1 ]]; then
    sum=$((sum + 24))
    line_count $sum
    grep_count "$regex_x2" 0
    grep_count "$regex_y2" 0
  fi
  grep_count "$regex_x0" 24
  grep_count "$regex_y0" 24
  grep_count "$regex_x1" 24
  grep_count "$regex_y1" 24


  try fdb-write data.xxxx.2.grib
  try fdb-list --all --minimum-keys="" --porcelain | tee out
  if [[ $i = 1 ]]; then
    sum=$((sum + 24))
    line_count $sum
    grep_count "$regex_y2" 0
  fi
  grep_count "$regex_x0" 24
  grep_count "$regex_y0" 24
  grep_count "$regex_x1" 24
  grep_count "$regex_y1" 24
  grep_count "$regex_x2" 24

  try fdb-write data.xxxy.2.grib
  try fdb-list --all --minimum-keys="" --porcelain | tee out
  [[ $i = 1 ]] && sum=$((sum + 24))
  line_count $sum
  grep_count "$regex_x0" 24
  grep_count "$regex_y0" 24
  grep_count "$regex_x1" 24
  grep_count "$regex_y1" 24
  grep_count "$regex_x2" 24
  grep_count "$regex_y2" 24

done
