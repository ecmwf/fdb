#!/usr/bin/env bash

set -ux

yell() { printf "$(basename "$0"): \033[0;31m%s\033[0m\\n" "$*" >&2; }
die() { yell "$*"; exit 1; }
try() { "$@" || die "Errored HERE => '$*'"; }

export PATH=@CMAKE_BINARY_DIR@/bin:$PATH
export FDB5_CONFIG_FILE="local.yaml"
export FDB_HOME=@PROJECT_BINARY_DIR@

test_name=porcelain
src_data="od.oper.grib"
src_dir=@CMAKE_CURRENT_SOURCE_DIR@
bin_dir=@CMAKE_CURRENT_BINARY_DIR@

########################################################################################################################

echo "running test '$test_name' on $(hostname)"

try cd $bin_dir

rm -rf $test_name || true
mkdir -p $test_name/localroot

try cd $test_name

try cp "$src_dir/local.yaml" ./
try cp "$bin_dir/$src_data" ./

########################################################################################################################

count() {
  [[ $# -eq 1 ]] || die "count requires 1 argument; expected count"
  val=$(wc -l < out) && val=$((val + 0))
  [[ $val -eq $1 ]] || die "Incorrect count => [$val != $1]"
}

grep_count() {
  [[ $# -eq 2 ]] || die "grep_count requires 2; regex and expected count"
  val=$(grep -E "$1" out | wc -l) && val=$((val + 0))
  [[ $val -eq $2 ]] || die "Incorrect count [$val != $2] for regex [$1]"
}

########################################################################################################################

# If we don't specify --porcelain, then the expanded request is prepended to the output request.
# Measure the difference!

try grib_set -s class=rd,expver=xxxx "$src_data" data.xxxx.grib
try grib_ls -m data.xxxx.grib
try fdb-write data.xxxx.grib


echo "Test all output"

try fdb-list --all --minimum-keys="" --porcelain --full > out
count 24


echo "Test normal output"

try fdb-list class=rd,expver=xxxx > out
grep_count '{class=rd,expver=xxxx' 24
grep_count '^retrieve,$' 1
grep_count '^\t.*=.*' 2
grep_count '^\tclass=rd' 1
grep_count '^\texpver=xxxx' 1


echo "Test porcelain output"

try fdb-list class=rd,expver=xxxx --porcelain > out
grep_count '{class=rd,expver=xxxx' 24
count 24


echo "Test expansion of date and param without porcelain"

try fdb-list class=rd,expver=xxxx,date=-1,stream=oper,type=an,levtype=pl,param=t > out
grep_count '{class=rd,expver=xxxx' 0
grep_count '^retrieve,$' 1
grep_count '^\t.*=.*' 7
grep_count '^\tclass=rd' 1
grep_count '^\texpver=xxxx' 1
grep_count '^\tparam=130' 1
grep_count '^\tdate=[0-9]{8}' 1


echo "Test expansion of date and param with porcelain"

try fdb-list class=rd,expver=xxxx,date=-1,stream=oper,type=an,levtype=pl,param=t --porcelain > out
[[ "$(grep '{class=rd,expver=xxxx' out | grep 'date=[0-9]{8}' | wc -l)" -eq 0 ]] || die "Incorrect number of entries reported"
count 0


echo "Test expansion of date and param without porcelain"

try fdb-list class=rd,expver=xxxx,date=-1,stream=oper,type=an,levtype=pl,param=138 > out
[[ $(grep '{class=rd,expver=xxxx' out | grep -E 'date=[0-9]{8}' | grep param=138 | wc -l) =~ "12" ]] || die "Incorrect number of entries reported"
grep_count '^retrieve,$' 1
grep_count '^\t.*=.*' 7
grep_count '^\tclass=rd' 1
grep_count '^\texpver=xxxx' 1
grep_count '^\tparam=138' 1
grep_count '^\tdate=[0-9]{8}' 1


echo "Test expansion of date and param with porcelain"

try fdb-list class=rd,expver=xxxx,date=-1,stream=oper,type=an,levtype=pl,param=138 --porcelain > out
[[ $(grep '{class=rd,expver=xxxx' out | grep -E 'date=[0-9]{8}' | grep param=138 | wc -l) =~ "12" ]] || die "Incorrect number of entries reported"
count 12
