#!/usr/bin/env bash

set -ux

yell() { printf "$(basename "$0"): \033[0;31m!!! %s !!!\033[0m\\n" "$*" >&2; }
die() { yell "$*"; exit 1; }
try() { "$@" || die "Errored HERE => '$*'"; }

line_count() {
  [[ $# -eq 1 ]] || die "line_count requires 1 argument; expected line count"
  val=$(wc -l < out) && val=$((val + 0))
  [[ $val -eq $1 ]] || die "Incorrect count => [$val != $1]"
}

grep_count() {
  [[ $# -eq 2 ]] || die "grep_count requires 2; regex and expected count"
  val=$(grep -cE "$1" out)
  [[ $val -eq $2 ]] || die "Incorrect count [$val != $2] for regex [$1]"
}

########################################################################################################################

export PATH=@CMAKE_BINARY_DIR@/bin:$PATH
export FDB5_CONFIG_FILE="local.yaml"
export FDB_HOME=@PROJECT_BINARY_DIR@

test_name=porcelain
src_data="../../../od.oper.grib"
src_dir=@CMAKE_CURRENT_SOURCE_DIR@
bin_dir=@CMAKE_CURRENT_BINARY_DIR@

########################################################################################################################

echo "running test '$test_name' on $(hostname)"

try cd $bin_dir

try rm -rf $test_name
try mkdir -p $test_name/localroot

try cd $test_name

try cp "$src_dir/local.yaml" ./
try ln -s "$bin_dir/$src_data" ./

work_dir=$(pwd)
echo "Working directory: $work_dir"

########################################################################################################################

# If we don't specify --porcelain, then the expanded request is prepended to the output request.
# Measure the difference!

try grib_set -s class=rd,expver=xxxx "$src_data" data.xxxx.grib
try grib_ls -m data.xxxx.grib
try fdb-write data.xxxx.grib

tab=$'\t' # macos doesn't support '\t' in grep

echo "Test all output"

try fdb-list --all --minimum-keys="" --porcelain --full | tee out
line_count 24


echo "Test normal output"

try fdb-list class=rd,expver=xxxx | tee out
grep_count "{class=rd,expver=xxxx" 24
grep_count "^list,$" 1
grep_count "^${tab}.*=.*" 2
grep_count "^${tab}class=rd" 1
grep_count "^${tab}expver=xxxx" 1


echo "Test porcelain output"

try fdb-list class=rd,expver=xxxx --porcelain | tee out
line_count 24
grep_count "{class=rd,expver=xxxx" 24


echo "Test expansion of date and param without porcelain"

try fdb-list class=rd,expver=xxxx,date=20240911,stream=oper,type=an,levtype=pl,param=t | tee out
grep_count "{class=rd,expver=xxxx" 0
grep_count "^list,$" 1
grep_count "^${tab}.*=.*" 7
grep_count "^${tab}class=rd" 1
grep_count "^${tab}expver=xxxx" 1
grep_count "^${tab}param=130" 1
grep_count "^${tab}date=20240911" 1


echo "Test expansion of date and param with porcelain"

try fdb-list class=rd,expver=xxxx,date=20240911,stream=oper,type=an,levtype=pl,param=t --porcelain | tee out
line_count 0
[[ "$(grep '{class=rd,expver=xxxx' out | grep 'date=20240911' | wc -l)" -eq 0 ]] || die "Incorrect number of entries reported"


echo "Test expansion of date and param without porcelain"

try fdb-list class=rd,expver=xxxx,date=20240911,stream=oper,type=an,levtype=pl,param=138 | tee out
grep_count "^list,$" 1
grep_count "^${tab}.*=.*" 7
grep_count "^${tab}class=rd" 1
grep_count "^${tab}expver=xxxx" 1
grep_count "^${tab}param=138" 1
grep_count "^${tab}date=20240911" 1
[[ $(grep '{class=rd,expver=xxxx' out | grep 'date=20240911' | grep param=138 | wc -l) -eq 12 ]] || die "Incorrect number of entries reported"


echo "Test expansion of date and param with porcelain"

try fdb-list class=rd,expver=xxxx,date=20240911,stream=oper,type=an,levtype=pl,param=138 --porcelain | tee out
line_count 12
[[ $(grep '{class=rd,expver=xxxx' out | grep 'date=20240911' | grep param=138 | wc -l) -eq 12 ]] || die "Incorrect number of entries reported"

echo "cleanup"
try rm -rf "$work_dir/localroot" "$work_dir"/data.*.grib
