#!/usr/bin/env bash

set -eux

fdbread="$<TARGET_FILE:fdb-read>"
fdbwrite="$<TARGET_FILE:fdb-write>"
fdblist="$<TARGET_FILE:fdb-list>"
gribls="$<TARGET_FILE:grib_ls>"
gribset="$<TARGET_FILE:grib_set>"

function post_process {
  num=0
  while read line; do [[ $line =~ ^\}, ]] && num=$((num+1)); [[ $line =~ \": ]] && echo $num $line; done | sort
}

srcdir=@CMAKE_CURRENT_SOURCE_DIR@
bindir=@CMAKE_CURRENT_BINARY_DIR@

cd $bindir

### cleanup and prepare test

rm -rf $bindir/localroot
mkdir localroot

for f in 12.grib local.yaml version2.yaml version3.yaml schema checkV2.req checkV3.req checkV3bis.req 
do
    cp $srcdir/$f $bindir
done

$gribset -s step=3 12.grib 3.grib
$gribset -s step=6 12.grib 6.grib
$gribset -s step=9 12.grib 9.grib

### recreate TOC with version 2 

export FDB5_CONFIG_FILE=local.yaml

export FDB5_SERIALISATION_VERSION=2

$fdbwrite 6.grib

unset FDB5_SERIALISATION_VERSION


export FDB5_CONFIG_FILE=version2.yaml

$fdbwrite 9.grib


cat > list <<EOF
{class=rd,expver=xxxx,stream=oper,date=20201102,time=0000,domain=g}{type=fc,levtype=sfc}{step=9,param=166}
{class=rd,expver=xxxx,stream=oper,date=20201102,time=0000,domain=g}{type=fc,levtype=sfc}{step=6,param=166}
EOF

cat > content.6 <<EOF
{ "messages" : [
  {
    "domain": "g",
    "levtype": "sfc",
    "date": 20201102,
    "time": "0000",
    "step": 6,
    "param": 166.128,
    "class": "rd",
    "type": "fc",
    "stream": "oper",
    "expver": "xxxx"
  }
]}
EOF

cat > content.12 <<EOF
{ "messages" : [
  {
    "domain": "g",
    "levtype": "sfc",
    "date": 20201102,
    "time": "0000",
    "step": 12,
    "param": 166.128,
    "class": "rd",
    "type": "fc",
    "stream": "oper",
    "expver": "xxxx"
  }
]}
EOF

cat > content.3 <<EOF
{ "messages" : [
  {
    "domain": "g",
    "levtype": "sfc",
    "date": 20201102,
    "time": "0000",
    "step": 3,
    "param": 166.128,
    "class": "rd",
    "type": "fc",
    "stream": "oper",
    "expver": "xxxx"
  }
]}
EOF

$fdblist --all --minimum-keys="" --porcelain | tee out
cmp out list

### test can read without setting version

unset FDB_DEDUPLICATE_FIELDS

# list contents
$fdblist --all --minimum-keys="" --porcelain | tee out
cmp out list

# read contents
$fdbread checkV2.req checkV2.grib
$gribls -jm checkV2.grib       | post_process | tee out
cat content.6                  | post_process | tee checkv2
diff out checkv2

# write new field with version 3 (will have toc with mixed versions)

export FDB5_CONFIG_FILE=version3.yaml

$fdbwrite 12.grib
$fdbread checkV3.req checkV3.grib
$gribls -jm checkV3.grib       | post_process | tee out
cat content.12                 | post_process | tee checkv3
diff out checkv3

export FDB_DEDUPLICATE_FIELDS=ON

export FDB5_CONFIG_FILE=version2.yaml

export FDB5_SERIALISATION_VERSION=3

$fdbwrite 3.grib

unset FDB5_SERIALISATION_VERSION

$fdbread checkV3bis.req checkV3bis.grib
$gribls -jm checkV3bis.grib    | post_process | tee out
cat content.3                  | post_process | tee checkv3bis
diff out checkv3bis

export FDB5_CONFIG_FILE=version3.yaml

# check still able to read previous v2 field
$fdbread checkV2.req checkV2.again.grib
$gribls -jm checkV2.again.grib | post_process | tee out
cat content.6                  | post_process | tee checkv2.again
diff out checkv2.again

cmp 6.grib checkV2.again.grib

unset FDB_DEDUPLICATE_FIELDS

